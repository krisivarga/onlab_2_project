b = 3
a*b
Knit gombbak lehet belőle html-t (vagy a többi formátumot) készíteni. Ekkor futtatja az összes kódot, és a kimenetét is elmenti.
echo = FALSE: a kódot nem rakja a kimenetbe.
results = "hide": az eredményt nem teszi a kimenetbe.
include = FALSE: se a kód, se az eredmény nem kerül a kimenetbe, de a kód lefut.
# R
## Working Directory
R Markdown esetén az a könyvtár, ahol az Rmd file található
RStudioban a grafikus felületen is beállítható
Minden relatív hivatkozás alapja
```{}
getwd()
setwd("~")
knitr::opts_knit$set(root.dir = "~" )
```
## Típusok
Atomi típusok: character, numeric, integer, complex, logical, factor
Vector: azonos típusokból
List: különböző típusok is lehetnek
Matrix
data frame (vagy data table)
```{r tipusok}
x = 1
y <- 2
x
print(y)
z = 1:10
z
class(x)
class(z)
str(z)
v = c(0.2, 5.3, 6, 0.1, 5, 2, 9)
v
v[3]
v[1:3]
v[c(1,6,4)]
sel = v>1
sel
v[v>1]
l1 = list("aa", 1)
l2 = list(l1, "bb", 0)
print(l2)
x = 1
y <- 2
x
print(y)
z = 1:10
z
class(x)
class(z)
str(z)
v = c(0.2, 5.3, 6, 0.1, 5, 2, 9)
v
v[3]
v[1:3]
v[c(1,6,4)]
sel = v>1
sel
v[v>1]
l1 = list("aa", 1)
l2 = list(l1, "bb", 0)
print(l2)
### 1. Feladat
Hozz létre egy vektort, amiben a következő számok vannak: (1, 5, 3, 9, 6, 2, 4, 8, 6).
Tedd egy változóba az ötödik és hatodik elemét.
Tedd egy változóba a harmadik, ötödik és hetedik elemét.
Tedd egy változóba a háromnál nagyobb elemeit.
```{r 1. feladat}
vec = c(1, 5, 3, 9, 6, 2, 4, 8, 6)
vec
sel1 = vec[5:6]
sel1
sel2 = vec[c(3,5,7)]
sel2
sel3 = vec[vec>3]
sel3
sel3 = vec[vec>3]
sel3
## Konvertálás típusok között:
```{r konvertalas}
w = 1:6
w
class(w)
wconv=as.character(w)
wconv
class(wconv)
w = 1:6
w
class(w)
wconv=as.character(w)
wconv
class(wconv)
## Faktor típus: kategóriák
```{r faktor}
ho = factor(c("jan", "jan", "mar", "okt", "aug", "feb", "jan", "mar"))
ho
class(ho)
table(ho)
ho = factor(c("jan", "jan", "mar", "okt", "aug", "feb", "jan", "mar"))
ho
class(ho)
table(ho)
```{r 2. feladat}
uni_x3 = runif(15, min = 3, max = 12)
uni_x3
mean(uni_x3)
sd(uni_x3)
uni_x3 = runif(15, min = 3, max = 12)
uni_x3
mean(uni_x3)
sd(uni_x3)
## Mátrixok
```{r matrix}
ma1 = matrix(c(1,2,3,4,5,6,7,8),2,4)
ma1
dim(ma1)
ma2 = matrix(c(1,2,3,4,5,6,7,8),4,2)
ma2
dim(ma2)
tma2 = t(ma2)
tma2
s1 = c(1,2,3)
s2 = c(4,5,6)
ma3 = rbind(s1, s2)
ma3
ma4 = cbind(s1, s2)
ma4
ma4[2,2]
ma4[3, ]
ma4[ ,1]
ma1 = matrix(c(1,2,3,4,5,6,7,8),2,4)
ma1
dim(ma1)
ma2 = matrix(c(1,2,3,4,5,6,7,8),4,2)
ma2
dim(ma2)
tma2 = t(ma2)
tma2
s1 = c(1,2,3)
s2 = c(4,5,6)
ma3 = rbind(s1, s2)
ma3
ma4 = cbind(s1, s2)
ma4
ma4[2,2]
ma4[3, ]
ma4[ ,1]
### 3. Feladat
mtrx1= [(1,2,3,4,5),(15, 14, 13, 12, 11),(0,0,0,0,0)]
mtrx1= matrix(c(1,2,3,4,5,15, 14, 13, 12, 11,0,0,0,0,0),3,5)
View(mtrx1)
mtrx1= matrix(c(1,2,3,4,5,15, 14, 13, 12, 11,0,0,0,0,0),5,3)
View(mtrx1)
View(ma2)
View(ma3)
mtrx1= rbind(c(1,2,3,4,5),(15, 14, 13, 12, 11),(0,0,0,0,0)
mtrx1= rbind(c(1,2,3,4,5),(15, 14, 13, 12, 11),(0,0,0,0,0))
mtrx1= rbind(c(1,2,3,4,5), c(15, 14, 13, 12, 11),c(0,0,0,0,0))
mtrx1= rbind(c(1,2,3,4,5), c(15, 14, 13, 12, 11),c(0,0,0,0,0))
mtrx1
Válaszd ki a mátrix második sorát,
mtrx1= rbind(c(1,2,3,4,5), c(15, 14, 13, 12, 11),c(0,0,0,0,0))
mtrx1
Válaszd ki a mátrix második sorát,
mtrx1[2,]
Válaszd ki a mátrix harmadik oszlopát.
mtrx1= rbind(c(1,2,3,4,5), c(15, 14, 13, 12, 11),c(0,0,0,0,0))
mtrx1
Válaszd ki a mátrix második sorát,
mtrx1[2,]
Válaszd ki a mátrix harmadik oszlopát.
mtrx1= rbind(c(1,2,3,4,5), c(15, 14, 13, 12, 11),c(0,0,0,0,0))
mtrx1
Válaszd ki a mátrix második sorát,
mtrx1[2,]
Válaszd ki a mátrix harmadik oszlopát.
mtrx1[,3]
Válaszd ki a mátrix azon oszlopait, amiknek a második sorában 13-nál nagyobb vagy az első sorában 4-nél nagyobb szám van.
mtrx1= rbind(c(1,2,3,4,5), c(15, 14, 13, 12, 11),c(0,0,0,0,0))
mtrx1
Válaszd ki a mátrix második sorát,
mtrx1[2,]
Válaszd ki a mátrix harmadik oszlopát.
mtrx1[,3]
Válaszd ki a mátrix azon oszlopait, amiknek a második sorában 13-nál nagyobb vagy az első sorában 4-nél nagyobb szám van.
sel1= mtrx1[2,]>13
sel2= mtrx1[1,]>4
mtrx1[,sel1 | sel2]
```{r 3. feladat}
```{}
installed.packages()
install.packages(c("data.table","curl"))
```
```{r}
library(data.table)
flights = fread("https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv")
flights = fread("https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv")
head(flights)
head(flights)
air = airquality
tail(air)
head(flights)
air = airquality
tail(air)
airquality
?datasets
library(help = "datasets").
library(help = "datasets")
colnames(flights)
colnames(flights)[1]="év"
colnames(flights)
table(flights$origin)
table(flights$dest)
flights[5, ]
flights[, 5]
flights[month == 2 & day == 2]
flights_from_jfk = flights$origin == "JFK"
head(flights_from_jfk, 10)
head(flights[flights_from_jfk], 10)
head(flights$carrier)
head(flights[ , 5])
head(flights[["day"]])
head(air,3)
tail(air,10)
describe(air)
data(air)
head(air,3)
colnames(air)[1]="Ozon"
colnames(air)[2]="Sugarzas"
colnames(air)[3]="Szel"
colnames(air)[4]="Homerseklet"
colnames(air)[5]="Honap"
colnames(air)[5]="Nap"
head(air,3)
sel3 = air$Ozon <! NA
sel3
head(air[sel3])
sel3 = air$Ozon =! NA
head(air[sel3]
head(air[sel3])
head(air[sel3],10)
sel3 = air$Ozon != NA
head(air[sel3],10)
sel3 = air$Ozon == NA
head(air[sel3],10)
air[4,25]
air[4,]
air[25,]
air[25,4]
air2 = head(air,2) + tail(air,2)
air2
air2 = c(head(air,2)) + c(tail(air,2))
dim(air)
ncol(air)
nrow(air)
colnames(air) = c('Ozon', 'Sugarzas', 'Szel', 'Homerseklet', 'Honap', 'Nap')
head(air,3)
!is.na(air$Ozon)
is.na(air$Ozon)
air[!is.na(air$Ozon),]
air2 = data.table(rbind(head(air,2),tail(air,2)))
air2
head(air,3)
air[!is.na(air$Sugarzas),]$Homerseklet)
mean(air[!is.na(air$Sugarzas),]$Homerseklet)
air[!is.na(air$Ozon),]
air[!is.na(air$Ozon),]
air = airquality
head(air,3)
tail(air,10)
dim(air)
colnames(air) = c('Ozon', 'Sugarzas', 'Szel', 'Homerseklet', 'Honap', 'Nap')
air[!is.na(air$Ozon),]
air[25,4]
air2 = data.table(rbind(head(air,2),tail(air,2)))
air2
mean(air[!is.na(air$Sugarzas),]$Homerseklet)
not_na = complete.cases(airquality)
class(not_na)
head(not_na)
head(airquality)
head(airquality[not_na, ])
airquality[not_na, ]
head(cars)
plot(cars)
cars = data.table(cars)
red = cars[dist > speed*2]
red
blue = cars[dist <= speed*2]
blue
plot(blue, col = "blue", xlim=c(0, 30), ylim=c(0,130))
points(red, col = "red")
lines(c(0,30), c(0, 60), col = "green")
plot(blue, col = "blue", xlim=c(0, 30), ylim=c(0,130))
```{r tobb plot egy abran, echo = FALSE}
```{r tobb plot egy abran, echo = FALSE}
red
blue
```{r tobb plot egy abran, echo = FALSE}
cars = data.table(cars)
red = cars[dist > speed*2]
red
blue = cars[dist <= speed*2]
blue
```{r tobb plot egy abran, echo = FALSE}
plot(blue, col = "blue", xlim=c(0, 30), ylim=c(0,130))
lines(c(0,30), c(0, 60), col = "green")
```{r tobb plot egy abran, echo = FALSE}
plot(blue, col = "blue", xlim=c(0, 30), ylim=c(0,130))
```{r tobb plot egy abran, echo = FALSE}
multivar_kernel_LR <- function(sus_data, off_data, bg, bg_stat = NULL){
# Background setup
num_obs <- nrow(bg)
num_var <- ncol(bg) - 1
# Calculate speaker means and covariance matrices, if not already supplied
if(is.null(bg_stat)){
# Split full background data by speaker
background_data_by_speaker <- split_by_speaker(bg_data)
# Calculate speaker means and covariance matrices in advance for multivar_kernel_LR to extract
background_mean <- colMeans(subset(bg_data, select = -speaker))
bg_stat <- list(
bg_means = lapply(background_data_by_speaker, colMeans),
bg_within_covar = mapply(function(x, y) nrow(x) * y,
background_data_by_speaker,
lapply(background_data_by_speaker, sse),
SIMPLIFY = FALSE)
)
bg_stat[["bg_between"]] <- mapply(function(x, y) nrow(x) * tcrossprod(y - background_mean),
background_data_by_speaker,
bg_stat$bg_means,
SIMPLIFY = FALSE)
}
# Number of speakers in the background
num_speakers <- length(bg_stat[[1]])
# Extract speaker means and covariance matrices
bg_means <- do.call(rbind, bg_stat$bg_means)
bg_within_covar <- Reduce('+', bg_stat$bg_within_covar) * num_speakers / (num_obs * (num_obs - num_speakers))
bg_between <- Reduce('+', bg_stat$bg_between)
bg_within_covar_inv <- solve(bg_within_covar)
# Suspect & Offender
n_susdata <- nrow(sus_data)
sus_mean <- colMeans(sus_data)
sus_covar_inv <- bg_within_covar_inv * n_susdata
n_offdata <- nrow(off_data)
off_mean <- colMeans(off_data)
off_covar_inv <- bg_within_covar_inv * n_offdata
sus_off_mean_diff <- off_mean - sus_mean
sus_off_mean_typicality <- solve(off_covar_inv + sus_covar_inv,
off_covar_inv %*% off_mean + sus_covar_inv %*% sus_mean)
# Kernel
smooth_power <- 1 / (num_var + 4)
smooth_param <- (4 / (num_speakers * (2 * num_var + 1))) ^ smooth_power
kernel <- smooth_param^2 * (bg_between / (num_speakers - 1) - bg_within_covar) * num_speakers / num_obs
kernel_inv <- solve(kernel)
off_kern_inv <- solve(bg_within_covar / n_offdata + kernel)
sus_kern_inv <- solve(bg_within_covar / n_susdata + kernel)
off_sus_covar_inv <- bg_within_covar_inv * n_susdata * n_offdata / (n_susdata + n_offdata)
off_sus_kern_inv <- solve(bg_within_covar / (n_susdata + n_offdata) + kernel)
kernden_at_typicality <- sum(apply(mean_distance(bg_means, sus_off_mean_typicality), 1, kernel_build, kern_inv = off_sus_kern_inv))
dist_bg_to_sus <- sum(apply(mean_distance(bg_means, sus_mean), 1, kernel_build, kern_inv = sus_kern_inv))
dist_bg_to_off <- sum(apply(mean_distance(bg_means, off_mean), 1, kernel_build, kern_inv = off_kern_inv))
# Likelihood ratio: equation simplified to reduce computation
llr <- 0.5 * (determinant(kernel)$modulus +
determinant(off_covar_inv + kernel_inv)$modulus +
determinant(sus_covar_inv + kernel_inv)$modulus -
determinant(off_covar_inv + sus_covar_inv + kernel_inv)$modulus) +
log(kernel_build(sus_off_mean_diff, off_sus_covar_inv)) +
log(kernden_at_typicality) +
log(num_speakers) -
log(dist_bg_to_off) -
log(dist_bg_to_sus)
if(llr == Inf) llr <- log(.Machine$double.xmax)
if(llr == -Inf) llr <- log(.Machine$double.xmin)
return(llr)
}
multivar_kernel_LR <- function(sus_data, off_data, bg, bg_stat = NULL){
# Background setup
num_obs <- nrow(bg)
num_var <- ncol(bg) - 1
# Calculate speaker means and covariance matrices, if not already supplied
if(is.null(bg_stat)){
# Split full background data by speaker
background_data_by_speaker <- split_by_speaker(bg_data)
# Calculate speaker means and covariance matrices in advance for multivar_kernel_LR to extract
background_mean <- colMeans(subset(bg_data, select = -speaker))
bg_stat <- list(
bg_means = lapply(background_data_by_speaker, colMeans),
bg_within_covar = mapply(function(x, y) nrow(x) * y,
background_data_by_speaker,
lapply(background_data_by_speaker, sse),
SIMPLIFY = FALSE)
)
bg_stat[["bg_between"]] <- mapply(function(x, y) nrow(x) * tcrossprod(y - background_mean),
background_data_by_speaker,
bg_stat$bg_means,
SIMPLIFY = FALSE)
}
# Number of speakers in the background
num_speakers <- length(bg_stat[[1]])
# Extract speaker means and covariance matrices
bg_means <- do.call(rbind, bg_stat$bg_means)
bg_within_covar <- Reduce('+', bg_stat$bg_within_covar) * num_speakers / (num_obs * (num_obs - num_speakers))
bg_between <- Reduce('+', bg_stat$bg_between)
bg_within_covar_inv <- solve(bg_within_covar)
# Suspect & Offender
n_susdata <- nrow(sus_data)
sus_mean <- colMeans(sus_data)
sus_covar_inv <- bg_within_covar_inv * n_susdata
n_offdata <- nrow(off_data)
off_mean <- colMeans(off_data)
off_covar_inv <- bg_within_covar_inv * n_offdata
sus_off_mean_diff <- off_mean - sus_mean
sus_off_mean_typicality <- solve(off_covar_inv + sus_covar_inv,
off_covar_inv %*% off_mean + sus_covar_inv %*% sus_mean)
# Kernel
smooth_power <- 1 / (num_var + 4)
smooth_param <- (4 / (num_speakers * (2 * num_var + 1))) ^ smooth_power
kernel <- smooth_param^2 * (bg_between / (num_speakers - 1) - bg_within_covar) * num_speakers / num_obs
kernel_inv <- solve(kernel)
off_kern_inv <- solve(bg_within_covar / n_offdata + kernel)
sus_kern_inv <- solve(bg_within_covar / n_susdata + kernel)
off_sus_covar_inv <- bg_within_covar_inv * n_susdata * n_offdata / (n_susdata + n_offdata)
off_sus_kern_inv <- solve(bg_within_covar / (n_susdata + n_offdata) + kernel)
kernden_at_typicality <- sum(apply(mean_distance(bg_means, sus_off_mean_typicality), 1, kernel_build, kern_inv = off_sus_kern_inv))
dist_bg_to_sus <- sum(apply(mean_distance(bg_means, sus_mean), 1, kernel_build, kern_inv = sus_kern_inv))
dist_bg_to_off <- sum(apply(mean_distance(bg_means, off_mean), 1, kernel_build, kern_inv = off_kern_inv))
# Likelihood ratio: equation simplified to reduce computation
llr <- 0.5 * (determinant(kernel)$modulus +
determinant(off_covar_inv + kernel_inv)$modulus +
determinant(sus_covar_inv + kernel_inv)$modulus -
determinant(off_covar_inv + sus_covar_inv + kernel_inv)$modulus) +
log(kernel_build(sus_off_mean_diff, off_sus_covar_inv)) +
log(kernden_at_typicality) +
log(num_speakers) -
log(dist_bg_to_off) -
log(dist_bg_to_sus)
if(llr == Inf) llr <- log(.Machine$double.xmax)
if(llr == -Inf) llr <- log(.Machine$double.xmin)
return(llr)
}
setwd("F:/iskola/2 félév/önlab2/kód/R")
library(readr)
features <- read_delim("F:/iskola/2 félév/önlab2/kód/R/features.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(features)
View(features)
multivar_kernel_LR <- function(sus_data, off_data, bg, bg_stat = NULL){
# Background setup
num_obs <- nrow(bg)
num_var <- ncol(bg) - 1
# Calculate speaker means and covariance matrices, if not already supplied
if(is.null(bg_stat)){
# Split full background data by speaker
background_data_by_speaker <- split_by_speaker(bg_data)
# Calculate speaker means and covariance matrices in advance for multivar_kernel_LR to extract
background_mean <- colMeans(subset(bg_data, select = -speaker))
bg_stat <- list(
bg_means = lapply(background_data_by_speaker, colMeans),
bg_within_covar = mapply(function(x, y) nrow(x) * y,
background_data_by_speaker,
lapply(background_data_by_speaker, sse),
SIMPLIFY = FALSE)
)
bg_stat[["bg_between"]] <- mapply(function(x, y) nrow(x) * tcrossprod(y - background_mean),
background_data_by_speaker,
bg_stat$bg_means,
SIMPLIFY = FALSE)
}
# Number of speakers in the background
num_speakers <- length(bg_stat[[1]])
# Extract speaker means and covariance matrices
bg_means <- do.call(rbind, bg_stat$bg_means)
bg_within_covar <- Reduce('+', bg_stat$bg_within_covar) * num_speakers / (num_obs * (num_obs - num_speakers))
bg_between <- Reduce('+', bg_stat$bg_between)
bg_within_covar_inv <- solve(bg_within_covar)
# Suspect & Offender
n_susdata <- nrow(sus_data)
sus_mean <- colMeans(sus_data)
sus_covar_inv <- bg_within_covar_inv * n_susdata
n_offdata <- nrow(off_data)
off_mean <- colMeans(off_data)
off_covar_inv <- bg_within_covar_inv * n_offdata
sus_off_mean_diff <- off_mean - sus_mean
sus_off_mean_typicality <- solve(off_covar_inv + sus_covar_inv,
off_covar_inv %*% off_mean + sus_covar_inv %*% sus_mean)
# Kernel
smooth_power <- 1 / (num_var + 4)
smooth_param <- (4 / (num_speakers * (2 * num_var + 1))) ^ smooth_power
kernel <- smooth_param^2 * (bg_between / (num_speakers - 1) - bg_within_covar) * num_speakers / num_obs
kernel_inv <- solve(kernel)
off_kern_inv <- solve(bg_within_covar / n_offdata + kernel)
sus_kern_inv <- solve(bg_within_covar / n_susdata + kernel)
off_sus_covar_inv <- bg_within_covar_inv * n_susdata * n_offdata / (n_susdata + n_offdata)
off_sus_kern_inv <- solve(bg_within_covar / (n_susdata + n_offdata) + kernel)
kernden_at_typicality <- sum(apply(mean_distance(bg_means, sus_off_mean_typicality), 1, kernel_build, kern_inv = off_sus_kern_inv))
dist_bg_to_sus <- sum(apply(mean_distance(bg_means, sus_mean), 1, kernel_build, kern_inv = sus_kern_inv))
dist_bg_to_off <- sum(apply(mean_distance(bg_means, off_mean), 1, kernel_build, kern_inv = off_kern_inv))
# Likelihood ratio: equation simplified to reduce computation
llr <- 0.5 * (determinant(kernel)$modulus +
determinant(off_covar_inv + kernel_inv)$modulus +
determinant(sus_covar_inv + kernel_inv)$modulus -
determinant(off_covar_inv + sus_covar_inv + kernel_inv)$modulus) +
log(kernel_build(sus_off_mean_diff, off_sus_covar_inv)) +
log(kernden_at_typicality) +
log(num_speakers) -
log(dist_bg_to_off) -
log(dist_bg_to_sus)
if(llr == Inf) llr <- log(.Machine$double.xmax)
if(llr == -Inf) llr <- log(.Machine$double.xmin)
return(llr)
}
